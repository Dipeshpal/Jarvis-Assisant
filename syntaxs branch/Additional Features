# This was made by Syntax 64/mgamingpro.
# Feature 1 : Making it so Jarvis only activates when you say a specific wake word.

# To add this feature, first you will need to add the following code to the very start of the py file:

Hibernating=True

# Then, locate the following code:
while True:
    res = obj.mic_input()
    
 # After locating this code, place the following code below it:
     if Hibernating == True and re.search('hey jarvis', res):
      Hibernating=False
      
 # You have successfully finished the easy part, now here comes the tricky part. In every new function of code you will need to add:
 and Hibernating == False
 
 # To the start of it, here is an example of before and after adding the new code:
 {Before} if re.search('weather|temperature', res):  {After}     if re.search('weather|temperature', res) and Hibernating == False:

# Finally, add the following code to the very bottom of the function:
        Hibernating = True

# Here is before and after
{Before}
if re.search('weather|temperature', res) :
        city = res.split(' ')[-1]
        weather_res = obj.weather(city=city)
        print(weather_res)
        t2s(weather_res)
{After}
if re.search('weather|temperature', res) and Hibernating == False:
        city = res.split(' ')[-1]
        weather_res = obj.weather(city=city)
        print(weather_res)
        t2s(weather_res)
        Hibernating = True
        
 That's it! Congratulations on succcessfully adding the wake word feature.
 
 # Feature 2 : A very own music player!
 
 # To add this feature you will first need to import playsound at the very top of the py file. If you do not have playsound installed use "pip install playsound"
 # If installing playsound results in an error you will need to find the playsound installation for your python version online.
 
 # After importing playsound create a folder called "library" in the root of the project, insert your mp3 files and use the following code:
 
      if re.search('play', res)  :
 #  This dict_sound library is used if you would like to manually add a nickname for the mp3 file.
        dict_sound = {
            'laugh': 'library/Crowd-laughing.mp3',
            'cat vibing': 'library/Cat_Vibing.mp3',
            'day and night' : 'library/day_n_nite_remix.mp3'
        }



        sound = res.split(' ', 1)[1]
        path = dict_sound.get(sound)
        if path is None:
         try:
            pathx = 'library/'
            pathz = res.replace("play", "", 1)
            pathy = pathz.replace(" ", "", 1)
            path = pathx+pathy+('.mp3')
            soundx = path.replace("library/", "", 1)
            sound = soundx.replace(".mp3", "", 1)
            print('Playing: ' + sound)
            t2s('Playing: ' + sound)
            playsound.playsound(path)
            musicpath=False
            Hibernating = True
         except playsound.PlaysoundException :
             print("Uh oh, I can't find the mp3 file.. Please check you have it.")
             t2s("Uh oh, I can't find the mp3 file.. Please check you have it.")
        else:
            print('Playing: ' + sound)
            t2s('Playing: ' + sound)
            playsound.playsound(path)
            Hibernating = True

# That's it! You're done. Congratulations on getting a mp3 player!


# Feature 3 : Making Jarvis perform a google search on the web browser.

# This feature is extremely simple. To get started import os and import webbrowser to the py file. OS and webbrowser are built in features so you do not need to install
# anything.

# After that, use the following code:

    if re.search('google', res)  :
    # res.replace is  much more easier than res.split
     term = res.replace("google ", "", 1)
     new=2
     TabUrl="http://google.com/?#q="
     webbrowser.open(TabUrl+term,new=new)
     print('Searching for:' + term)
     t2s('Searching for:' + term)
 
# Thats it! Your done.

# Feature 4 : A new way to launch apps.

# JarvisAI comes with a function to launch apps (obj.launch_any_app) 
# However this needs admin permissions on some devices, and failing to have permissions results in an error.

# An easier way of doing the same thing but without admin permissions is using os, firstly import os at the start.

# Then create a path and launch it using os.startfile

# Here is the new app launcher:

    if re.search('launch', res) :
        dict_app = {
            'chrome': 'C:\Program Files\Google\Chrome\Application\chrome.exe',
            'epic games': 'C:\Program Files (x86)\Epic Games\Launcher\Portal\Binaries\Win32\EpicGamesLauncher.exe',
            'vscode': 'C:/Users/muham\AppData\Local\Programs\Microsoft VS Code\Code.exe'

        }

        app = res.split(' ', 1)[1]
        path = dict_app.get(app)
        if path is None:
            t2s('Application path not found')
            print('Application path not found')
        else:
            t2s('Launching: ' + app)
            os.startfile(path)
  # Congrats! You're done.
  
  
  
  # Here is another tip for JarvisAI.
  
 # Sometimes, when you use res.search the search word may be too used and may not work well.
 # For example, if you used res.search on the word "hi", it would detect it in "hi"ghway and everything else.
 # If you are wanting to be specific, instead you can use "if"
 
 # Like this:
 
     if res == 'hi'  :
print("works")
